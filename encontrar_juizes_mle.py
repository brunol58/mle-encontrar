import time
import pandas as pd
import requests
from bs4 import BeautifulSoup
import streamlit as st
from io import BytesIO
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from datetime import datetime
from docx import Document

# T√≠tulo do app
st.title("Relat√≥rio de Ju√≠zes - Mandados de Levantamento(TJSP)")
st.warning("üöß Esta aplica√ß√£o est√° em fase de testes. Desenvolvida por Bruno Ferreira da Silva.")

# Inicializar vari√°veis de sess√£o
if 'df_final' not in st.session_state:
    st.session_state.df_final = None
if 'extracao_concluida' not in st.session_state:
    st.session_state.extracao_concluida = False
if 'data_relatorio' not in st.session_state:
    st.session_state.data_relatorio = datetime.now().strftime('%d/%m/%Y')

# Upload do CSV
arquivo = st.file_uploader("üìÑ Fa√ßa upload do relat√≥rio gerado diretamente no Portal de Custas", type=["csv"])

if arquivo:
    if not st.session_state.extracao_concluida:
        df = pd.read_csv(arquivo, sep=';', encoding='utf-8', dtype={'N√∫mero do Processo': str})
        df["N√∫mero do Processo"] = df["N√∫mero do Processo"].str.strip("\t")
        df["N√∫mero do Mandado"] = df["N√∫mero do Mandado"].str.strip("\t")
        df['N√∫mero do Processo Mod'] = df['N√∫mero do Processo'].str.replace('826', '', regex=False)

        # Data mais recente
        try:
            df['Data da A√ß√£o'] = pd.to_datetime(df['Data da A√ß√£o'], format='%d/%m/%Y')
            data_mais_recente = df['Data da A√ß√£o'].max()
            st.session_state.data_relatorio = data_mais_recente.strftime('%d/%m/%Y')
        except:
            st.session_state.data_relatorio = datetime.now().strftime('%d/%m/%Y')

        BASE_URL = "https://esaj.tjsp.jus.br"

        def formatar_numero_cnj(numero):
            return f"{numero[:7]}-{numero[7:9]}.{numero[9:13]}.8.26.{numero[13:]}"

        def gerar_link(numero_mod):
            numero_formatado = formatar_numero_cnj(numero_mod)
            foro = numero_mod[-4:]
            return (
                f"{BASE_URL}/cpopg/search.do?"
                f"conversationId=&cbPesquisa=NUMPROC"
                f"&numeroDigitoAnoUnificado={numero_mod}"
                f"&foroNumeroUnificado={foro}"
                f"&dadosConsulta.valorConsultaNuUnificado={numero_formatado}"
                f"&dadosConsulta.valorConsultaNuUnificado=UNIFICADO"
                f"&dadosConsulta.valorConsulta="
                f"&dadosConsulta.tipoNuProcesso=UNIFICADO"
            )

        def extrair_juiz(numero_mod):
            headers = {
                "User-Agent": (
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                    "AppleWebKit/537.36 (KHTML, like Gecko) "
                    "Chrome/115.0.0.0 Safari/537.36"
                )
            }

            def requisitar(url):
                for tentativa in range(3):
                    try:
                        resp = requests.get(url, headers=headers, timeout=10)
                        if resp.status_code != 200:
                            time.sleep(2)
                            continue
                        if "captcha" in resp.text.lower():
                            return None, "P√°gina bloqueada por captcha"
                        return BeautifulSoup(resp.text, "html.parser"), None
                    except requests.Timeout:
                        print(f"‚è≥ Timeout {tentativa+1} para {url}")
                        time.sleep(2)
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erro {tentativa+1} para {url}: {e}")
                        time.sleep(2)
                return None, "Falha ap√≥s m√∫ltiplas tentativas"

            url = gerar_link(numero_mod)
            soup, erro = requisitar(url)
            if erro:
                return erro

            proc_princ = soup.find("a", class_="processoPrinc")
            if proc_princ:
                href_princ = proc_princ.get("href")
                if not href_princ:
                    return "Link do processo principal n√£o encontrado"
                url_princ = BASE_URL + href_princ
                soup_princ, erro_princ = requisitar(url_princ)
                if erro_princ:
                    return erro_princ
                juiz_princ = soup_princ.find("span", id="juizProcesso")
                return juiz_princ.get_text(strip=True) if juiz_princ else "Juiz n√£o encontrado"
            else:
                juiz = soup.find("span", id="juizProcesso")
                return juiz.get_text(strip=True) if juiz else "Juiz n√£o encontrado"

        status_extracao = st.empty()
        status_extracao.info("‚è≥ Extra√ß√£o de nomes dos ju√≠zes em andamento...")
        progress_bar = st.progress(0)
        status_text = st.empty()
        table_placeholder = st.empty()

        display_df = df[["N√∫mero do Processo", "√ìrg√£o/Vara"]].copy()
        display_df["Juiz"] = ["‚è≥ Extraindo..." for _ in range(len(df))]
        table_placeholder.dataframe(display_df)

        resultados_juiz = []

        for i, (index, row) in enumerate(df.iterrows()):
            try:
                juiz = extrair_juiz(row["N√∫mero do Processo Mod"])
                resultados_juiz.append(juiz)
            except Exception:
                juiz = "Erro ou n√£o encontrado"
                resultados_juiz.append(juiz)

            display_df.at[index, "Juiz"] = juiz
            progress = (i + 1) / len(df)
            progress_bar.progress(progress)
            status_text.text(f"Processando {i + 1} de {len(df)} | √öltimo juiz: {juiz}")

            if i % 5 == 0 or i == len(df) - 1:
                table_placeholder.dataframe(display_df)
                st.session_state.df_final = df.copy()
                st.session_state.df_final["Juiz"] = resultados_juiz
                time.sleep(0.1)

            time.sleep(1.5)

        df["Juiz"] = resultados_juiz
        st.session_state.df_final = df.copy()
        st.session_state.extracao_concluida = True
        table_placeholder.dataframe(display_df)
        status_extracao.success("‚úÖ Extra√ß√£o conclu√≠da!")

    else:
        df = st.session_state.df_final.copy()
        st.success("‚úÖ Extra√ß√£o j√° conclu√≠da anteriormente!")
        st.dataframe(df[["N√∫mero do Processo", "√ìrg√£o/Vara", "Juiz"]])

    # Edi√ß√£o manual
    st.write("### Insira manualmente os ju√≠zes n√£o encontrados:")
    with st.form(key='edicao_juizes'):
        juizes_editados = {}
        for i, row in df[df["Juiz"] == "Juiz n√£o encontrado"].iterrows():
            juiz_manual = st.text_input(
                f"Informe o juiz para o processo {row['N√∫mero do Processo']}:",
                key=f"juiz_edit_{i}"
            )
            juizes_editados[i] = juiz_manual.strip() if juiz_manual.strip() else None
        submit_button = st.form_submit_button("Aplicar Corre√ß√µes")

    if submit_button:
        for i, juiz in juizes_editados.items():
            if juiz:
                df.at[i, "Juiz"] = juiz
                st.session_state.df_final.at[i, "Juiz"] = juiz
        st.success("Corre√ß√µes aplicadas com sucesso!")
        st.dataframe(df[["N√∫mero do Processo", "√ìrg√£o/Vara", "Juiz"]])

    # Configura√ß√£o do relat√≥rio
    st.write("### ‚öôÔ∏è Configura√ß√£o do Relat√≥rio")
    campos_disponiveis = {
        "N√∫mero do Processo": "N√∫mero do Processo",
        "Jurisdi√ß√£o": "Jurisdi√ß√£o",
        "Situa√ß√£o do Mandado": "Situa√ß√£o do Mandado",
        "Valor do Mandado": "Valor do Mandado",
        "Usu√°rio da A√ß√£o": "Usu√°rio da A√ß√£o",
        "Data da A√ß√£o": "Data da A√ß√£o"
    }

    selecao_campos = {}
    col1, col2, col3 = st.columns(3)
    with col1:
        selecao_campos["N√∫mero do Processo"] = st.checkbox("N√∫mero do Processo", value=True)
        selecao_campos["Jurisdi√ß√£o"] = st.checkbox("Jurisdi√ß√£o", value=False)
    with col2:
        selecao_campos["Situa√ß√£o do Mandado"] = st.checkbox("Situa√ß√£o do Mandado", value=False)
        selecao_campos["Valor do Mandado"] = st.checkbox("Valor do Mandado", value=False)
    with col3:
        selecao_campos["Usu√°rio da A√ß√£o"] = st.checkbox("Usu√°rio da A√ß√£o", value=False)
        selecao_campos["Data da A√ß√£o"] = st.checkbox("Data da A√ß√£o", value=False)

    mostrar_separadores = sum(selecao_campos.values()) > 1

    styles = getSampleStyleSheet()
    style_normal = styles["Normal"]
    style_heading = styles["Heading1"]
    style_subheading = styles["Heading2"]

    st.write(f"### üìÑ Baixar relat√≥rios at√© {st.session_state.data_relatorio} (PDF e Word)")
    for juiz, grupo in df.groupby("Juiz"):
        if juiz in ["Erro ou n√£o encontrado", "Juiz n√£o encontrado"]:
            continue

        # PDF
        pdf_buffer = BytesIO()
        doc_pdf = SimpleDocTemplate(pdf_buffer)
        story = [Paragraph(f"Relat√≥rio at√© {st.session_state.data_relatorio} - Magistrado(a): {juiz}", style_heading), Spacer(1, 12)]

        # Word
        docx_doc = Document()
        docx_doc.add_heading(f"Relat√≥rio at√© {st.session_state.data_relatorio}", level=1)
        docx_doc.add_heading(f"Magistrado(a): {juiz}", level=2)

        for orgao, subgrupo in grupo.sort_values("√ìrg√£o/Vara").groupby("√ìrg√£o/Vara"):
            story.append(Paragraph(f"Vara: {orgao}", style_subheading))
            story.append(Spacer(1, 6))
            docx_doc.add_heading(f"Vara: {orgao}", level=3)

            for _, row in subgrupo.iterrows():
                if selecao_campos["N√∫mero do Processo"]:
                    story.append(Paragraph(f"{row['N√∫mero do Processo']}", style_normal))
                    docx_doc.add_paragraph(f"{row['N√∫mero do Processo']}")
                if selecao_campos["Jurisdi√ß√£o"]:
                    story.append(Paragraph(f"Jurisdi√ß√£o: {row['Jurisdi√ß√£o']}", style_normal))
                    docx_doc.add_paragraph(f"Jurisdi√ß√£o: {row['Jurisdi√ß√£o']}")
                if selecao_campos["Situa√ß√£o do Mandado"]:
                    story.append(Paragraph(f"Situa√ß√£o do Mandado: {row['Situa√ß√£o do Mandado']}", style_normal))
                    docx_doc.add_paragraph(f"Situa√ß√£o do Mandado: {row['Situa√ß√£o do Mandado']}")
                if selecao_campos["Valor do Mandado"]:
                    story.append(Paragraph(f"Valor do Mandado: R$ {row['Valor do Mandado']}", style_normal))
                    docx_doc.add_paragraph(f"Valor do Mandado: R$ {row['Valor do Mandado']}")
                if selecao_campos["Usu√°rio da A√ß√£o"]:
                    story.append(Paragraph(f"Usu√°rio da A√ß√£o: {row['Usu√°rio da A√ß√£o']}", style_normal))
                    docx_doc.add_paragraph(f"Usu√°rio da A√ß√£o: {row['Usu√°rio da A√ß√£o']}")
                if selecao_campos["Data da A√ß√£o"]:
                    story.append(Paragraph(f"Data da A√ß√£o: {row['Data da A√ß√£o']}", style_normal))
                    docx_doc.add_paragraph(f"Data da A√ß√£o: {row['Data da A√ß√£o']}")

                if mostrar_separadores:
                    story.append(Spacer(1, 12))
                    story.append(Paragraph("-" * 50, style_normal))
                    story.append(Spacer(1, 12))
                    docx_doc.add_paragraph("-" * 50)

        doc_pdf.build(story)
        pdf_buffer.seek(0)
        nome_base = f"Relatorio_MLEs_{juiz.replace('/', '_').replace(' ', '_')}_{st.session_state.data_relatorio.replace('/', '-')}"
        st.download_button(f"üì• Baixar PDF - {juiz}", data=pdf_buffer, file_name=f"{nome_base}.pdf", mime="application/pdf")

        docx_buffer = BytesIO()
        docx_doc.save(docx_buffer)
        docx_buffer.seek(0)
        st.download_button(f"üì• Baixar Word - {juiz}", data=docx_buffer, file_name=f"{nome_base}.docx", mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document")
